# Install necessary libraries
!pip install -q transformers accelerate peft datasets bitsandbytes trl

#  Import everything we need
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM, TrainingArguments
from peft import LoraConfig, get_peft_model
from datasets import load_dataset
from trl import SFTTrainer

#  Load the 3â€¯B LLaMA 3.2 model with 4-bit quantization
model_name = "meta-llama/Llama-3.2-3B-Instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    load_in_4bit=True,
    device_map="auto",
)

#  Apply LoRA to make fine-tuning lighter
lora_config = LoraConfig(r=8, lora_alpha=32, lora_dropout=0.05, bias="none")
model = get_peft_model(model, lora_config)
model.print_trainable_parameters()

#  Load your dataset (e.g., Q&A pairs)
ds = load_dataset("your_dataset_name")
ds = ds.train_test_split(test_size=0.1)

#  Set up training parameters
args = TrainingArguments(
    per_device_train_batch_size=4,
    gradient_accumulation_steps=8,
    warmup_steps=100,
    num_train_epochs=3,
    learning_rate=2e-4,
    fp16=True,  # Mixed precision
    logging_steps=10,
    output_dir="llama3.2-lora-finetuned",
)

trainer = SFTTrainer(
    model=model,
    train_dataset=ds["train"],
    eval_dataset=ds["test"],
    args=args,
    tokenizer=tokenizer,
)

#  Train the model
trainer.train()

#  Save your fine-tuned model
model.save_pretrained("llama3.2-3b-lora")
tokenizer.save_pretrained("llama3.2-3b-lora")

#  Load and test your new model
from transformers import pipeline
pipe = pipeline(
    "text-generation",
    model="llama3.2-3b-lora",
    tokenizer="llama3.2-3b-lora",
    device_map="auto",
)
print(pipe("Explain how photosynthesis works", max_new_tokens=100, do_sample=True))

